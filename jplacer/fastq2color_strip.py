"""
Parse a directory of fastq files and the domain file (generated by the -r option of generate_color_strip.py)
to create a new file
"""

import os
import sys
import argparse
import re
from roblib import stream_fastq


def fq_ids(fqdir, verbose=False):
    """
    Get a list of fastq ids for each of the fastq files in fqdir
    :param fqdir: directory of fastq files
    :return: a dict of ids
    """

    if verbose:
        sys.stderr.write("Reading fastq files\n")

    fqids = {}
    for fqf in os.listdir(fqdir):
        if not fqf.endswith('fastq'):
            continue
        if verbose:
            sys.stderr.write("\t{}\n".format(fqf))
        for seqid, fullid, seq, qual in stream_fastq(os.path.join(fqdir, fqf)):
            if fullid in fqids:
                if fqids[fullid] == fqf.replace('.fastq', ''):
                    continue
                sys.stderr.write("WARNING: {} is not a unique id. It is in {} and {}\n".format(fullid, fqids[fullid], fqf))
            fqids[fullid] = fqf.replace('.fastq', '')
            if ' ' in fullid:
                fi = fullid.replace(' ', '_')
                fqids[fi] = fqf.replace('.fastq', '')

    return fqids



def color_strip(domainf, outputf, fqdir, verbose=False):
    """
    Write a color strip file for the fastq files
    :param domainf: the domain file name
    :param outputf: the output file name
    :param fqdir: the directory of fastq files
    :return:
    """

    colors = ['#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a','#ffff99','#b15928']

    fqids = fq_ids(fqdir, verbose)

    # how many groups do we have
    groups = list(set(fqids.values()))
    if len(groups) > len(colors):
        sys.stderr.write("Crap. Not enouh colors. We need at least {} colors\n".format(len(groups)))
        sys.exit(-1)

    if verbose:
        sys.stderr.write("We have {} groups for colors\n".format(len(groups)))

    with open(outputf, 'w') as out:
        out.write("DATASET_COLORSTRIP\nSEPARATOR SPACE\n")
        out.write("DATASET_LABEL Species\n")
        out.write("COLOR #0000ff\n")

        # write the legend
        out.write("LEGEND_TITLE Species Legend\n")
        out.write("LEGEND_COLORS")
        for i, j in enumerate(groups):
            out.write(" {}".format(colors[i]))
        out.write("\n")
        out.write("LEGEND_SHAPES")
        for i, j in enumerate(groups):
            out.write(" 3")
        out.write("\n")
        out.write("LEGEND_LABELS")
        for i, j in enumerate(groups):
            out.write(" {}".format(j))
        out.write("\n")

        # place the strip
        out.write("STRIP_WIDTH 50\n")
        out.write("COLOR_BRANCHES 0\n")
        out.write("DATA\n")

        with open(domainf, 'r') as f:
            for l in f:
                p=l.strip().split("\t")
                if 'Metagenome' not in p[1]:
                    continue
                if p[0] in fqids:
                    y = re.sub('[=\[\]:]', '_', p[0])
                    c = colors[groups.index(fqids[p[0]])]
                    out.write("{} {} {}\n".format(y, c, fqids[p[0]]))
                    continue
                

                l = re.sub('\.\d+\.\d+$', '', p[0])
                if l in fqids:
                    y = re.sub('[=\[\]:]', '_', p[0])
                    c = colors[groups.index(fqids[l])]
                    out.write("{} {} {}\n".format(y, c, fqids[l]))
                    continue

                sys.stderr.write("Can't find {} or {} in the fastq files\n".format(p[0], l))



if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Color a list of metagenomes')
    parser.add_argument('-l', help='domains file output from -r from generate_color_strip.py', required=True)
    parser.add_argument('-o', help='output filename', required=True)
    parser.add_argument('-d', help='directory of fastq file(s) upon which to base the coloring', required=True)
    parser.add_argument('-v', help='verbose output', action='store_true')
    args = parser.parse_args()

    color_strip(args.l, args.o, args.d, args.v)
